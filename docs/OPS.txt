neg (dest);
mov (src, dest);
and (src, dest);
or (src, dest);
xor (src, dest);
not (dest);

cbw (); AL 8 - AX 16
cwd (); AX 16 - DX:AX 32
cdwe (); AX 16 - EAX 32
cdq (); EAX 32 - EDX:EAX 32

movsx (src, dest); mov + sign extension; dest must be larger than src
*movzx (); but that may be a misprint

(NOTE: @c flag is set if count is 1. Undefined if count is not 1)
shl (count, dest); count= {0 -> dest.size -1} count can also be the content of CL reg
shr (count, dest);  see above
sar (count, dest); arithmetic shift right - keeps first bit for sign
(NOTE: @c flag and rotated bit are equivalent. They both move.)
rol (count, dest); shifts but move the dropped bit to other end
ror (count, dest); see above

(NOTE: @c flag moves to other end)
rcl (count, dest); shifts with carry flag as an intermediary
rcr (count, dest); see above

cld (); direction = 0
std (); direction = 1
cli (); interrupt = 0
sti (): interrupt = 1
clc (): carry = 0
stc (): carry = 1
cmc (); carry = flipped
sahf (); AH is put as the lowest 8 bits of EFLAGS
lahf () EFLAGS lowest 8 becomes AH

(NOTE: Only use 32 bit regs or constant - unless building a double or doing 2 words)
(Intentionally PUSH + POP in wrong order to swap order possibly)
push (reg16|32);
push (var16|32);
pushw (constant16);
pushd (constant32);

pop (reg16|32);
pop (var16|32);

(Don't use - Push all regs onto stack)
pusha - popa - 16 bit regs
pushad - popad - 32 bit regs

pushf, pushfd EFLAGS 16 bit
popf, popfd EFLAGS 32 bit

inc (mem/reg);
dec (mem/reg);

lea (reg32, memory_address_or_operands); puts an address in reg32
(NOTE: & only works on static var)

(NOTE: Destination is always a register of the same size as the source)
(NOTE: Source can be a register, constant, or memory data *including addresses if stored in the address* No 8 bit operands)
(Overflow will set Carry and Overflow flags)
intmul (constant|reg|mem, destreg16|32); destreg = src * destreg;
intmul (constant, src16|32, destreg16|32); destreg = src * constant; (src cannot be constant)

bound ( reg16|32, mem16|32[2]); Bounds are unsigned-raises #BRupon failure
into (); raises #OF
